//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

using OSGeo.OSR;

namespace OSGeo.OGR
{
    using global::System;
    using global::System.Runtime.InteropServices;

    public class Envelope : global::System.IDisposable
    {
        private HandleRef swigCPtr;
        protected bool swigCMemOwn;
        protected object swigParentRef;

        protected static object ThisOwn_true()
        {
            return null;
        }

        protected object ThisOwn_false()
        {
            return this;
        }

        public Envelope(IntPtr cPtr, bool cMemoryOwn, object parent)
        {
            swigCMemOwn = cMemoryOwn;
            swigParentRef = parent;
            swigCPtr = new HandleRef(this, cPtr);
        }

        public static HandleRef getCPtr(Envelope obj)
        {
            return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
        }

        public static HandleRef getCPtrAndDisown(Envelope obj, object parent)
        {
            if (obj != null)
            {
                obj.swigCMemOwn = false;
                obj.swigParentRef = parent;
                return obj.swigCPtr;
            }
            else
            {
                return new HandleRef(null, IntPtr.Zero);
            }
        }

        public static HandleRef getCPtrAndSetReference(Envelope obj, object parent)
        {
            if (obj != null)
            {
                obj.swigParentRef = parent;
                return obj.swigCPtr;
            }
            else
            {
                return new HandleRef(null, IntPtr.Zero);
            }
        }

        ~Envelope()
        {
            Dispose();
        }

        public virtual void Dispose()
        {
            lock (this)
            {
                if (swigCPtr.Handle != IntPtr.Zero && swigCMemOwn)
                {
                    swigCMemOwn = false;
                    OgrPINVOKE.delete_Envelope(swigCPtr);
                }

                swigCPtr = new HandleRef(null, IntPtr.Zero);
                swigParentRef = null;
                GC.SuppressFinalize(this);
            }
        }

        public double MinX
        {
            set
            {
                OgrPINVOKE.Envelope_MinX_set(swigCPtr, value);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
            }
            get
            {
                double ret = OgrPINVOKE.Envelope_MinX_get(swigCPtr);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        public double MaxX
        {
            set
            {
                OgrPINVOKE.Envelope_MaxX_set(swigCPtr, value);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
            }
            get
            {
                double ret = OgrPINVOKE.Envelope_MaxX_get(swigCPtr);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        public double MinY
        {
            set
            {
                OgrPINVOKE.Envelope_MinY_set(swigCPtr, value);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
            }
            get
            {
                double ret = OgrPINVOKE.Envelope_MinY_get(swigCPtr);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        public double MaxY
        {
            set
            {
                OgrPINVOKE.Envelope_MaxY_set(swigCPtr, value);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
            }
            get
            {
                double ret = OgrPINVOKE.Envelope_MaxY_get(swigCPtr);
                if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
                return ret;
            }
        }

        public Envelope() : this(OgrPINVOKE.new_Envelope(), true, null)
        {
            if (OgrPINVOKE.SWIGPendingException.Pending) throw OgrPINVOKE.SWIGPendingException.Retrieve();
        }

        public Geometry GetGeometry()
        {
            OSGeo.OGR.Geometry geo2 = new OSGeo.OGR.Geometry(OSGeo.OGR.wkbGeometryType.wkbLinearRing);
            // 2   1
            // 3   4
            geo2.AddPoint(MaxX, MaxY, 0);
            geo2.AddPoint(MinX, MaxY, 0);
            geo2.AddPoint(MinX, MinY, 0);
            geo2.AddPoint(MaxX, MinY, 0);
            OSGeo.OGR.Geometry poly2 = new Geometry(wkbGeometryType.wkbPolygon);
            poly2.AddGeometryDirectly(geo2);
            return poly2;
        }

        public double GetWidth()
        {
            return MaxX - MinX;
        }

        public double GetHeight()
        {
            return MaxY - MinY;
        }

        public Envelope Intersection(Envelope otherEnv)
        {
            Geometry a = this.GetGeometry();
            Geometry b = otherEnv.GetGeometry();
            Geometry intersection =  a.Intersection(b);
            if (intersection == null)
            {
                return null;
            }
            else
            {
                Envelope e = new Envelope();
                intersection.GetEnvelope(e);
                return e;
            }
        }

        public Envelope Union(Envelope otherEnv)
        {
            Geometry a = this.GetGeometry();
            Geometry b = otherEnv.GetGeometry();
            Geometry intersection =  a.Union(b);
            if (intersection == null)
            {
                return null;
            }
            else
            {
                Envelope e = new Envelope();
                intersection.GetEnvelope(e);
                return e;
            }
        }
    }
}